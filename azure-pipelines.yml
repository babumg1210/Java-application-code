trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'package'

      # Copy the built artifact to a specific directory
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/target'
          Contents: '**/*.jar'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/drop'

      # Publish the build artifact
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'drop'
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/drop'
          publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure VM'
  dependsOn: Build  # Deploy only after the build stage is successful
  jobs:
  - job: DeployJob
    displayName: 'Deploy Job'
    #environment: 'Staging'  # Specify the environment (e.g., 'Staging', 'Production')
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)/drop'  # Where to store the downloaded artifact
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'devpos-sc'  # Specify your Azure service connection
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Production VM details
          VM_IP="52.170.84.227"  # Your Production VM's IP address
          VM_USER="adminuser"  # SSH username for the VM
          VM_PASSWORD="Password123!"  # SSH password (should be securely managed)
          ARTIFACT_PATH="$(System.DefaultWorkingDirectory)/drop/spring-boot-web.jar"  # Path to the .jar file from the build artifact
          REMOTE_PATH="/home/adminuser/deployments/spring-boot-web.jar"  # Remote path on the VM

          # Install SSHpass for password-based SSH authentication
          sudo apt-get install -y sshpass

          # Ensure the destination directory exists on the VM
          sshpass -p $VM_PASSWORD ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP "mkdir -p /home/adminuser/deployments"

          # Copy the .jar file to the Production VM
          echo "Copying application .jar to the Production VM..."
          sshpass -p $VM_PASSWORD scp -o StrictHostKeyChecking=no $ARTIFACT_PATH $VM_USER@$VM_IP:$REMOTE_PATH

          # Deploy and restart the application on the VM
          echo "Deploying the application on Production VM..."
          sshpass -p $VM_PASSWORD ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP << EOF
            cd /home/adminuser/deployments
            echo "Stopping existing application..."
            sudo systemctl stop spring-boot-web.service || true  # Ensure no error if the service is not running
            echo "Moving new application JAR..."
            sudo mv spring-boot-web.jar /opt/adminuser/spring-boot-web.jar
            echo "Starting the application..."
            sudo systemctl start spring-boot-web.service
          EOF
        displayName: 'Deploy Spring Boot Application to Production'
