trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'package'

      # Copy the built artifact to a specific directory
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/target'
          Contents: '**/*.jar'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/drop'

      # Publish the build artifact
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'drop'
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/drop'
          publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure VM'
  dependsOn: Build  # Deploy only after the build stage is successful
  jobs:
  - job: DeployJob
    displayName: 'Deploy Job'
    environment: 'Staging'  # Specify the environment (e.g., 'Staging', 'Production')
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)/drop'  # Where to store the downloaded artifact
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'az'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Similar SSH and deployment logic for production
          VM_IP="your_production_vm_public_ip"  # Your Production VM's IP
          VM_USER="your_vm_username"  # Same SSH username as staging or adjust if needed
          SSH_KEY_PATH="~/.ssh/id_rsa"  # Same SSH private key or adjust path
          ARTIFACT_PATH="$(System.DefaultWorkingDirectory)/drop/your-application.jar"
          REMOTE_PATH="/home/your_vm_username/deployments/your-application.jar"

          # Copy the .jar to Production VM
          scp -i $SSH_KEY_PATH -o StrictHostKeyChecking=no $ARTIFACT_PATH $VM_USER@$VM_IP:$REMOTE_PATH

          # Run the application in Production
          ssh -i $SSH_KEY_PATH -o StrictHostKeyChecking=no $VM_USER@$VM_IP << EOF
            cd /home/your_vm_username/deployments
            sudo systemctl stop your-application.service
            sudo mv your-application.jar /opt/your-application/your-application.jar
            sudo systemctl start your-application.service
          EOF
        displayName: 'Deploy Spring Boot Application to Production'